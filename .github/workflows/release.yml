name: Release on Version Change

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.pypi_check.outputs.should_release }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install dependencies
        run: pip install tomli requests
      
      - name: Check if version differs from PyPI
        id: pypi_check
        run: |
          # Extract package name and version from pyproject.toml
          cat > check_pypi.py << 'EOF'
          import tomli
          import requests
          import sys
          import os
          
          def get_package_info():
              try:
                  with open("pyproject.toml", "rb") as f:
                      data = tomli.loads(f.read().decode('utf-8'))
                  
                  # Try different common locations for package name and version
                  if "project" in data and "name" in data["project"] and "version" in data["project"]:
                      return data["project"]["name"], data["project"]["version"]
                  elif "tool" in data and "poetry" in data["tool"]:
                      poetry_data = data["tool"]["poetry"]
                      if "name" in poetry_data and "version" in poetry_data:
                          return poetry_data["name"], poetry_data["version"]
                  
                  # If we can't find both name and version in standard locations
                  print("Could not find package name and version in pyproject.toml")
                  return None, None
              except Exception as e:
                  print(f"Error parsing pyproject.toml: {e}", file=sys.stderr)
                  return None, None
          
          # Get package info
          package_name, current_version = get_package_info()
          if not package_name or not current_version:
              print("Failed to extract package info")
              print("should_release=false", file=open(os.environ["GITHUB_OUTPUT"], "a"))
              sys.exit(1)
          
          print(f"Package: {package_name}")
          print(f"Current version: {current_version}")
          
          # Check PyPI for the latest version
          try:
              response = requests.get(f"https://pypi.org/pypi/{package_name}/json")
              if response.status_code == 200:
                  pypi_data = response.json()
                  pypi_version = pypi_data["info"]["version"]
                  print(f"PyPI version: {pypi_version}")
                  
                  if current_version != pypi_version:
                      print(f"Version differs from PyPI. Local: {current_version}, PyPI: {pypi_version}")
                      print("should_release=true", file=open(os.environ["GITHUB_OUTPUT"], "a"))
                  else:
                      print("Version already matches PyPI version")
                      print("should_release=false", file=open(os.environ["GITHUB_OUTPUT"], "a"))
              elif response.status_code == 404:
                  print("Package not found on PyPI, this is a new package")
                  print("should_release=true", file=open(os.environ["GITHUB_OUTPUT"], "a"))
              else:
                  print(f"Error checking PyPI: {response.status_code}")
                  print("should_release=false", file=open(os.environ["GITHUB_OUTPUT"], "a"))
          except Exception as e:
              print(f"Error connecting to PyPI: {e}")
              print("should_release=false", file=open(os.environ["GITHUB_OUTPUT"], "a"))
          EOF
          
          # Run the check
          python check_pypi.py

  run-tests:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          python -m pip install -e .
      
      - name: Run tests
        run: python -m pytest tests

  release-build:
    needs: [check-version, run-tests]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - check-version
      - run-tests
      - release-build
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      id-token: write
    environment: prod
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
